import nextcord
from nextcord.ext import commands
import asyncio
import yt_dlp

# yt-dlp configuration
ytdl_format_options = {
    "format": "bestaudio/best",
    "restrictfilenames": True,
    "noplaylist": True,
    "nocheckcertificate": True,
    "ignoreerrors": False,
    "logtostderr": False,
    "quiet": True,
    "no_warnings": True,
    "default_search": "auto",
    "source_address": "0.0.0.0",
    "skip_download": True
}

ffmpeg_options = {
    'options': '-vn'
}

# Configure yt-dlp
ytdl = yt_dlp.YoutubeDL(ytdl_format_options)

class YTDLSource(nextcord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get("title")
        self.url = data.get("url")

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        try:
            data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))
            if 'entries' in data:
                data = data['entries'][0]
            if 'youtube' in data.get('extractor', ''):
                raise ValueError("YouTube links are not allowed.")
            filename = data['url'] if stream else ytdl.prepare_filename(data)
            return cls(nextcord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)
        except ValueError as ve:
            print(f"ValueError: {ve}")
            return None
        except Exception as e:
            print(f"Error extracting URL: {e}")
            return None

class MusicBot(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.song_queue = []
        self.is_playing = False
        self.streaming = False  # Add this attribute to manage streaming lock

    async def play_next(self, ctx):
        if self.song_queue:
            self.is_playing = True
            url, stream = self.song_queue.pop(0)
            async with ctx.typing():
                player = await YTDLSource.from_url(url, loop=self.bot.loop, stream=stream)
                if player is None:
                    await ctx.send(f"Could not play the URL: {url}.")
                    return
                ctx.voice_client.play(player, after=lambda e: self.bot.loop.create_task(self.play_next(ctx)))

                if stream:
                    self.streaming = False  # Reset streaming lock if it's a stream
                    await ctx.send(f"Now streaming: {player.title}")
                else:
                    await ctx.send(f"Now playing: {player.title}")
        else:
            self.is_playing = False

    @commands.command(name='join', help='Joins a voice channel')
    async def join(self, ctx, *, channel: nextcord.VoiceChannel = None):
        if channel is None:
            if ctx.author.voice:
                channel = ctx.author.voice.channel
            else:
                await ctx.send("You are not connected to a voice channel.")
                return
        
        if ctx.voice_client is not None:
            return await ctx.voice_client.move_to(channel)
        
        await channel.connect()

    @commands.command(name='play', help='Plays a song from a search query')
    async def play(self, ctx, *, query):
        await ctx.send("Command temporarily disabled by the FSS Team due to an issue. Please try it again later, and join our support server for updates regarding this command.")
#        
#        search_url = f"ytsearch:{query}"
#        async with ctx.typing():
#            try:
#                data = await self.bot.loop.run_in_executor(None, lambda: ytdl.extract_info(search_url, download=False))
#                if 'entries' in data:
#                    data = data['entries'][0]
#                if 'youtube' in data.get('extractor', ''):
#                    raise ValueError("YouTube links are not allowed.")
#                url = data['url']
#                self.song_queue.append((url, False))
#                if not self.is_playing:
#                    await self.play_next(ctx)
#                await ctx.send(f"Added to the queue: {data['title']}")
#            except Exception as e:
#                await ctx.send(f"Error: {e}")

    @commands.command(name='stream', help='Adds a song from a URL to the queue for streaming')
    async def stream(self, ctx, *, url):
        if self.streaming:
            await ctx.send("A stream is currently in progress. Please wait until it finishes.")
            return
        
        if 'youtube.com' in url or 'youtu.be' in url:
            await ctx.send("YouTube links are not supported.")
            return

        self.streaming = True
        self.song_queue.append((url, True))
        if not self.is_playing:
            await self.play_next(ctx)
        else:
            await ctx.send(f"Added to the queue: {url}")

    @commands.command(name='pause', help='Pauses the current song')
    async def pause(self, ctx):
        if ctx.voice_client.is_playing():
            ctx.voice_client.pause()
            await ctx.send("Paused the song.")
        else:
            await ctx.send("No song is currently playing.")

    @commands.command(name='resume', help='Resumes the current song')
    async def resume(self, ctx):
        if ctx.voice_client.is_paused():
            ctx.voice_client.resume()
            await ctx.send("Resumed the song.")
        else:
            await ctx.send("The song is not paused.")

    @commands.command(name='volume', help='Changes the bot volume (0-100)')
    async def volume(self, ctx, volume: int):
        if ctx.voice_client is None:
            return await ctx.send("Not connected to a voice channel.")

        ctx.voice_client.source.volume = volume / 100
        await ctx.send(f"Changed volume to {volume}%")

    @commands.command(name='stop', help='Stops the song and disconnects the bot')
    async def stop(self, ctx):
        self.song_queue.clear()
        await ctx.voice_client.disconnect()
        self.is_playing = False

    @commands.command(name='skip', help='Skips the current song')
    async def skip(self, ctx):
        if ctx.voice_client.is_playing():
            ctx.voice_client.stop()
            await self.play_next(ctx)
            await ctx.send("Skipped to the next song.")
        else:
            await ctx.send("No song is currently playing.")

    @play.before_invoke
    @stream.before_invoke
    async def ensure_voice(self, ctx):
        if ctx.voice_client is None:
            if ctx.author.voice:
                await ctx.author.voice.channel.connect()
            else:
                await ctx.send("You are not connected to a voice channel.")
                raise commands.CommandError("Author not connected to a voice channel.")
        elif ctx.voice_client.is_playing():
            ctx.voice_client.stop()

# Bot setup
intents = nextcord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="$", description="Music Bot", intents=intents)

@bot.event
async def on_ready():
    print(f"Logged in as {bot.user} (ID: {bot.user.id})")
    print("------")

bot.add_cog(MusicBot(bot))

bot.run("Your-Bot-Token-Here")
